const RAW_TRAINING_DATA = "(1 (5 5 -53.5) 1)(2 (5 4 -18.8) 2)(3 (5 3 -6.9) 2)(4 (5 2 -15.6) 1)(5 (5 1 19.3) 3)(6 (5 0 0.0) 2)(7 (5 -1 -11.3) 1)(8 (5 -2 -0.4) 3)(9 (5 -3 -14.1) 1)(10 (5 -4 0.8) 3)(11 (5 -5 -12.5) 2)(12 (4 5 -22.0) 3)(13 (4 4 -14.2) 3)(14 (4 3 -7.8) 2)(15 (4 2 -4.6) 1)(16 (4 1 0.6) 2)(17 (4 0 0.0) 2)(18 (4 -1 6.8) 3)(19 (4 -2 11.2) 3)(20 (4 -3 -6.6) 2)(21 (4 -4 -6.4) 2)(22 (4 -5 -3.0) 2)(23 (3 5 -17.5) 3)(24 (3 4 -29.8) 1)(25 (3 3 -8.1) 2)(26 (3 2 -2.2) 2)(27 (3 1 0.1) 2)(28 (3 0 0.0) 2)(29 (3 -1 -1.3) 2)(30 (3 -2 5.3) 3)(31 (3 -3 -2.7) 2)(32 (3 -4 10.5) 3)(33 (3 -5 -10.5) 1)(34 (2 5 -28.0) 3)(35 (2 4 -17.6) 2)(36 (2 3 -7.8) 2)(37 (2 2 -2.4) 2)(38 (2 1 7.8) 3)(39 (2 0 -11.0) 1)(40 (2 -1 -15.6) 1)(41 (2 -2 -0.8) 2)(42 (2 -3 -1.4) 1)(43 (2 -4 15.8) 3)(44 (2 -5 13.0) 2)(45 (1 5 -29.5) 2)(46 (1 4 -10.6) 3)(47 (1 3 -8.9) 1)(48 (1 2 -2.2) 2)(49 (1 1 -0.3) 2)(50 (1 0 10.0) 3)(51 (1 -1 -0.1) 2)(52 (1 -2 0.6) 2)(53 (1 -3 3.3) 2)(54 (1 -4 -3.7) 1)(55 (1 -5 34.5) 3)(56 (0 5 -30.0) 1)(57 (0 4 -6.8) 3)(58 (0 3 13.6) 3)(59 (0 2 12.4) 3)(60 (0 1 -0.2) 2)(61 (0 0 0.0) 2)(62 (0 -1 0.2) 2)(63 (0 -2 -5.4) 1)(64 (0 -3 5.4) 2)(65 (0 -4 12.8) 2)(66 (0 -5 25.0) 2)(67 (-1 5 -19.5) 2)(68 (-1 4 -23.2) 1)(69 (-1 3 -3.3) 2)(70 (-1 2 -0.6) 2)(71 (-1 1 0.1) 2)(72 (-1 0 9.0) 3)(73 (-1 -1 -1.7) 1)(74 (-1 -2 19.2) 3)(75 (-1 -3 6.9) 2)(76 (-1 -4 15.6) 2)(77 (-1 -5 29.5) 2)(78 (-2 5 -9.0) 3)(79 (-2 4 -4.8) 2)(80 (-2 3 -16.6) 1)(81 (-2 2 0.8) 2)(82 (-2 1 -13.4) 1)(83 (-2 0 0.0) 2)(84 (-2 -1 0.2) 2)(85 (-2 -2 -2.5) 1)(86 (-2 -3 18.8) 3)(87 (-2 -4 17.6) 2)(88 (-2 -5 25.0) 1)(89 (-3 5 -5.4) 2)(90 (-3 4 0.4) 2)(91 (-3 3 2.7) 2)(92 (-3 2 6.6) 3)(93 (-3 1 13.3) 3)(94 (-3 0 -4.0) 1)(95 (-3 -1 -0.1) 2)(96 (-3 -2 -13.8) 1)(97 (-3 -3 25.1) 3)(98 (-3 -4 18.8) 2)(99 (-3 -5 35.5) 2)(100 (-4 5 -2.0) 1)(101 (-4 4 1.4) 1)(102 (-4 3 6.6) 2)(103 (-4 2 -9.2) 1)(104 (-4 1 2.2) 2)(105 (-4 0 -8.0) 1)(106 (-4 -1 14.4) 3)(107 (-4 -2 7.6) 3)(108 (-4 -3 -4.1) 1)(109 (-4 -4 19.2) 2)(110 (-4 -5 24.0) 1)(111 (-5 5 23.5) 3)(112 (-5 4 13.2) 2)(113 (-5 3 1.0) 1)(114 (-5 2 7.4) 2)(115 (-5 1 19.3) 3)(116 (-5 0 -18.0) 1)(117 (-5 -1 10.7) 3)(118 (-5 -2 0.6) 2)(119 (-5 -3 6.9) 2)(120 (-5 -4 18.8) 2)(121 (-5 -5 35.5) 1)";

/* Regex pattern matching (took me an hour to write this regex haha) */
let patt = /(?<=\()-?\d+\.?\d{0,} -?\d+\.?\d{0,} -?\d+\.?\d{0,}\) \d/g;

let training_data = Array();

/* Convert raw training data to a 4-attr array */
function parseTrainingData(){
    let matches = RAW_TRAINING_DATA.match(patt);
    for(let x = 0; x < matches.length; ++x){
        matches[x] = matches[x].replaceAll(")", ""); // remove trailing parenthesis
        // split match by spaces
        let spliced = matches[x].split(" ");
        let vec = Array();
        for(let i = 0; i < spliced.length; ++i){
            vec.push(parseFloat(spliced[i]));
        }
        training_data.push(vec);
    }
    return training_data;
}